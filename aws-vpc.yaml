AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create VPC with public and private subnets, NAT Gateways, Route Tables, Auto Scaling Group, Bastion Host, and Application Load Balancer.

Parameters:
  VpcCIDR:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  AvailabilityZone1:
    Type: String
    Default: "us-east-1a"
    Description: First availability zone
  AvailabilityZone2:
    Type: String
    Default: "us-east-1b"
    Description: Second availability zone

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: VpcCIDR
    

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: VPC
      InternetGatewayId: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: VPC
      AvailabilityZone: AvailabilityZone1
      CidrBlock: "10.0.1.0/24"
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  VPC
      AvailabilityZone: AvailabilityZone2
      CidrBlock: "10.0.2.0/24"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:  PublicSubnet1
      RouteTableId: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:  PublicSubnet2
      RouteTableId:  PublicRouteTable

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:  NatGateway1EIP.AllocationId
      SubnetId: PublicSubnet1

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:  NatGateway2EIP.AllocationId
      SubnetId:  PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: VPC

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  VPC

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  VPC
      AvailabilityZone:  AvailabilityZone1
      CidrBlock: "10.0.3.0/24"
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:  VPC
      AvailabilityZone:  AvailabilityZone2
      CidrBlock: "10.0.4.0/24"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:  PrivateSubnet1
      RouteTableId:  PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:  PrivateSubnet2
      RouteTableId:  PrivateRouteTable2

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - PrivateSubnet1
        - PrivateSubnet2
      LaunchConfigurationName:  LaunchConfiguration
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-04b70fa74e45c3917
      InstanceType: t2.micro
      SecurityGroups:
        -  EC2SecurityGroup

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      VpcId:  VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04b70fa74e45c3917
      InstanceType: t2.micro
      KeyName: bastion-key
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            -  BastionSecurityGroup
          SubnetId:  PublicSubnet

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion host
      VpcId:  VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - PublicSubnet1
        -  PublicSubnet2
      SecurityGroups:
        -  LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId:  VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:  VPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
