### 08-06-24 ###
### Baylon Obinna ###
AWSTemplateFormatVersion: '2010-09-09'
Description: |
  AWS CloudFormation template to create a VPC with public and private subnets,
  NAT Gateways, Route Tables, Auto Scaling Group, Bastion Host, and Application Load Balancer.

Parameters:
  availabilityZone1:
    Description: First availability zone
    Default: us-east-1a
    Type: String

  availabilityZone2:
    Description: Second availability zone
    Default: us-east-1b
    Type: String

  vpcCIDR:
    Description: CIDR block for the VPC
    Default: 10.0.0.0/16
    Type: String

Resources:
  # VPC
  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR

  # Internet Gateway
  internetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: vpc
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway

  # Attach Gateway
  attachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref vpc

  # Public Subnets
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref availabilityZone1
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref vpc

  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref availabilityZone2
      CidrBlock: 10.0.2.0/24
      VpcId: !Ref vpc

  # Public Route Table
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref vpc

  # Public Subnet Route Table Association
  publicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  publicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet2

  # Add Route in Public Route Table
  publicRouteToInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway

  # NAT Gateways
  natGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: attachGateway
    Properties:
      Domain: vpc

  natGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt natGateway1EIP.AllocationId
      SubnetId: !Ref publicSubnet1

  natGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: attachGateway
    Properties:
      Domain: vpc

  natGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt natGateway2EIP.AllocationId
      SubnetId: !Ref publicSubnet2

  # Private Subnets
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref availabilityZone1
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref vpc

  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref availabilityZone2
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref vpc

  # Auto Scaling Group
  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref launchConfiguration
      MaxSize: '4'
      MinSize: '2'
      VPCZoneIdentifier:
        - !Ref privateSubnet1
        - !Ref privateSubnet2

  # Launch Configuration
  launchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-04b70fa74e45c3917
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref ec2SecurityGroup

  # EC2 Security Group
  ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instances
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref vpc

  # Bastion Security Group
  bastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion host
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      VpcId: !Ref vpc

  # Bastion Host
  bastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-04b70fa74e45c3917
      InstanceType: t2.micro
      KeyName: bastion-key
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: '0'
          GroupSet:
            - !Ref bastionSecurityGroup
          SubnetId: !Ref publicSubnet1

  # Key Pair
  bastionKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: bastion-key